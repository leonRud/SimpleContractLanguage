package SimpleContractLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new ActionReference_Constraints();
      case 1:
        return new ActionTrigger_Constraints();
      case 2:
        return new ActionTriggerStatement_Constraints();
      case 3:
        return new Clause_Constraints();
      case 4:
        return new DateTime_Method_isAfter_Constraints();
      case 5:
        return new DateTime_Method_isBefore_Constraints();
      case 6:
        return new DateTime_Reference_Constraints();
      case 7:
        return new Duration_Reference_Constraints();
      case 8:
        return new Integer_Reference_Constraints();
      case 9:
        return new ParticipantReference_Constraints();
      case 10:
        return new Participant_Method_deposit_Constraints();
      case 11:
        return new TimeTriggerStatement_duration_Constraints();
      case 12:
        return new TokenTransaction_Method_amount_Constraints();
      case 13:
        return new TokenTransaction_Reference_Constraints();
      case 14:
        return new Transfer_Constraints();
      case 15:
        return new addDuration_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3a27346aff20a726L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x2e4aefaabc5a3d1L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x15208bca35ec350cL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad503a77L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c1250671537c673L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c125067153a653fL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c125067151fd807L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x49702a64e19967b5L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c12506715400b6eL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x2dbbedc3a2b95c56L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x55e1bccfa9c2aceaL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c125067155b545aL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x49702a64e1a00ee9L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x49702a64e196179aL), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x74e67740044e6ed4L), MetaIdFactory.conceptId(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c125067153a67eaL)).seal();
}
