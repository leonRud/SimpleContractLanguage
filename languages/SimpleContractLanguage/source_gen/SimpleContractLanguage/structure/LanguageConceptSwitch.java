package SimpleContractLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int ActionReference = 1;
  public static final int ActionTrigger = 2;
  public static final int ActionTriggerStatement = 3;
  public static final int Clause = 4;
  public static final int Condition = 5;
  public static final int Contract = 6;
  public static final int DateTime = 7;
  public static final int DateTime_Method_isAfter = 8;
  public static final int DateTime_Method_isBefore = 9;
  public static final int DateTime_Reference = 10;
  public static final int DateTime_Type = 11;
  public static final int Duration = 12;
  public static final int DurationType = 13;
  public static final int DurationWords = 14;
  public static final int Duration_Reference = 15;
  public static final int Duration_Type = 16;
  public static final int Elements = 17;
  public static final int EmptyContractContent = 18;
  public static final int IAction = 19;
  public static final int IClause = 20;
  public static final int IContractContent = 21;
  public static final int IElements = 22;
  public static final int IParticipant = 23;
  public static final int IVariables = 24;
  public static final int Integer = 25;
  public static final int Integer_Reference = 26;
  public static final int Modality = 27;
  public static final int Participant = 28;
  public static final int ParticipantReference = 29;
  public static final int Participant_Method_deposit = 30;
  public static final int Participant_Type = 31;
  public static final int Require = 32;
  public static final int TimeSpecification = 33;
  public static final int TimeTriggerStatement = 34;
  public static final int TimeTriggerStatement_duration = 35;
  public static final int TimeTriggerStatement_time = 36;
  public static final int TokenTransaction = 37;
  public static final int TokenTransaction_Method_amount = 38;
  public static final int TokenTransaction_Reference = 39;
  public static final int TokenTransaction_Type = 40;
  public static final int Transfer = 41;
  public static final int Trigger = 42;
  public static final int TriggerStatement = 43;
  public static final int addDuration = 44;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL);
    builder.put(0x3a27346aff1ff5fdL, Action);
    builder.put(0x3a27346aff20a726L, ActionReference);
    builder.put(0x2e4aefaabc5a3d1L, ActionTrigger);
    builder.put(0x15208bca35ec350cL, ActionTriggerStatement);
    builder.put(0x6e2c7874ad503a77L, Clause);
    builder.put(0x3c12506715652a4dL, Condition);
    builder.put(0x6e2c7874ad4f9743L, Contract);
    builder.put(0x3c12506715081694L, DateTime);
    builder.put(0x3c1250671537c673L, DateTime_Method_isAfter);
    builder.put(0x3c125067153a653fL, DateTime_Method_isBefore);
    builder.put(0x3c125067151fd807L, DateTime_Reference);
    builder.put(0x3c125067151fd744L, DateTime_Type);
    builder.put(0x3c12506715302e28L, Duration);
    builder.put(0x2cf24455866a6cc4L, DurationType);
    builder.put(0x2cf24455866a62cdL, DurationWords);
    builder.put(0x49702a64e19967b5L, Duration_Reference);
    builder.put(0x49702a64e1996b5aL, Duration_Type);
    builder.put(0x6e2c7874ad4f9883L, Elements);
    builder.put(0x43d2aa2604af3c2eL, EmptyContractContent);
    builder.put(0x4b6992bf6aad8eaeL, IAction);
    builder.put(0x4b6992bf6aad854dL, IClause);
    builder.put(0x6e2c7874ad5302e5L, IContractContent);
    builder.put(0x49702a64e18758e3L, IElements);
    builder.put(0x4b6992bf6aad980fL, IParticipant);
    builder.put(0x4b6992bf6a91a950L, IVariables);
    builder.put(0x3c125067153d3804L, Integer);
    builder.put(0x3c12506715400b6eL, Integer_Reference);
    builder.put(0x2d7b97922866d6c6L, Modality);
    builder.put(0x6e2c7874ad4f9886L, Participant);
    builder.put(0x2dbbedc3a2b95c56L, ParticipantReference);
    builder.put(0x55e1bccfa9c2aceaL, Participant_Method_deposit);
    builder.put(0x55e1bccfa9c64380L, Participant_Type);
    builder.put(0x7678ff525f597e98L, Require);
    builder.put(0x2d7b979228791b1fL, TimeSpecification);
    builder.put(0x15208bca35f748a6L, TimeTriggerStatement);
    builder.put(0x3c125067155b545aL, TimeTriggerStatement_duration);
    builder.put(0x3c1250671561d371L, TimeTriggerStatement_time);
    builder.put(0x49702a64e18b8ea4L, TokenTransaction);
    builder.put(0x49702a64e1a00ee9L, TokenTransaction_Method_amount);
    builder.put(0x49702a64e196179aL, TokenTransaction_Reference);
    builder.put(0x49702a64e1994d59L, TokenTransaction_Type);
    builder.put(0x74e67740044e6ed4L, Transfer);
    builder.put(0x2d7b9792287db0deL, Trigger);
    builder.put(0x2d7b9792287db0e5L, TriggerStatement);
    builder.put(0x3c125067153a67eaL, addDuration);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
