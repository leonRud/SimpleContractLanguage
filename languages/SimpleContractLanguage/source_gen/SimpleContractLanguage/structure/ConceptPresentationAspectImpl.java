package SimpleContractLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_ActionReference;
  private ConceptPresentation props_ActionTrigger;
  private ConceptPresentation props_ActionTriggerStatement;
  private ConceptPresentation props_Clause;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_Contract;
  private ConceptPresentation props_DateTime;
  private ConceptPresentation props_DateTime_Method_isAfter;
  private ConceptPresentation props_DateTime_Method_isBefore;
  private ConceptPresentation props_DateTime_Reference;
  private ConceptPresentation props_DateTime_Type;
  private ConceptPresentation props_Duration;
  private ConceptPresentation props_DurationType;
  private ConceptPresentation props_DurationWords;
  private ConceptPresentation props_Duration_Reference;
  private ConceptPresentation props_Duration_Type;
  private ConceptPresentation props_Elements;
  private ConceptPresentation props_EmptyContractContent;
  private ConceptPresentation props_IAction;
  private ConceptPresentation props_IClause;
  private ConceptPresentation props_IContractContent;
  private ConceptPresentation props_IElements;
  private ConceptPresentation props_IParticipant;
  private ConceptPresentation props_IVariables;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_Integer_Reference;
  private ConceptPresentation props_Modality;
  private ConceptPresentation props_Participant;
  private ConceptPresentation props_ParticipantReference;
  private ConceptPresentation props_Participant_Method_deposit;
  private ConceptPresentation props_Participant_Type;
  private ConceptPresentation props_Require;
  private ConceptPresentation props_TimeSpecification;
  private ConceptPresentation props_TimeTriggerStatement;
  private ConceptPresentation props_TimeTriggerStatement_duration;
  private ConceptPresentation props_TimeTriggerStatement_time;
  private ConceptPresentation props_TokenTransaction;
  private ConceptPresentation props_TokenTransaction_Method_amount;
  private ConceptPresentation props_TokenTransaction_Reference;
  private ConceptPresentation props_TokenTransaction_Type;
  private ConceptPresentation props_Transfer;
  private ConceptPresentation props_Trigger;
  private ConceptPresentation props_TriggerStatement;
  private ConceptPresentation props_addDuration;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.ActionReference:
        if (props_ActionReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3a27346aff20a726L, 0x3a27346aff20a727L, "Action", "", "");
          props_ActionReference = cpb.create();
        }
        return props_ActionReference;
      case LanguageConceptSwitch.ActionTrigger:
        if (props_ActionTrigger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x2e4aefaabc5a3d1L, 0x2e4aefaabc5a3d2L, "actionRef", "", "");
          props_ActionTrigger = cpb.create();
        }
        return props_ActionTrigger;
      case LanguageConceptSwitch.ActionTriggerStatement:
        if (props_ActionTriggerStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add Action Trigger");
          props_ActionTriggerStatement = cpb.create();
        }
        return props_ActionTriggerStatement;
      case LanguageConceptSwitch.Clause:
        if (props_Clause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Clause = cpb.create();
        }
        return props_Clause;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add Condition");
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.Contract:
        if (props_Contract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Contract = cpb.create();
        }
        return props_Contract;
      case LanguageConceptSwitch.DateTime:
        if (props_DateTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DateTime = cpb.create();
        }
        return props_DateTime;
      case LanguageConceptSwitch.DateTime_Method_isAfter:
        if (props_DateTime_Method_isAfter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check if the DateTime is after a specific DateTime");
          cpb.rawPresentation("isAfter");
          props_DateTime_Method_isAfter = cpb.create();
        }
        return props_DateTime_Method_isAfter;
      case LanguageConceptSwitch.DateTime_Method_isBefore:
        if (props_DateTime_Method_isBefore == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check if the DateTime is before a specific DateTime");
          cpb.rawPresentation("isBefore");
          props_DateTime_Method_isBefore = cpb.create();
        }
        return props_DateTime_Method_isBefore;
      case LanguageConceptSwitch.DateTime_Reference:
        if (props_DateTime_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c125067151fd807L, 0x3c125067151fd880L, "dateTime", "", "");
          props_DateTime_Reference = cpb.create();
        }
        return props_DateTime_Reference;
      case LanguageConceptSwitch.DateTime_Type:
        if (props_DateTime_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DateTime_Type");
          props_DateTime_Type = cpb.create();
        }
        return props_DateTime_Type;
      case LanguageConceptSwitch.Duration:
        if (props_Duration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Duration = cpb.create();
        }
        return props_Duration;
      case LanguageConceptSwitch.DurationType:
        if (props_DurationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DurationType = cpb.create();
        }
        return props_DurationType;
      case LanguageConceptSwitch.DurationWords:
        if (props_DurationWords == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x2cf24455866a62cdL, 0x2cf24455866a76bdL, "type", "", "");
          props_DurationWords = cpb.create();
        }
        return props_DurationWords;
      case LanguageConceptSwitch.Duration_Reference:
        if (props_Duration_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x49702a64e19967b5L, 0x49702a64e1996816L, "duration", "", "");
          props_Duration_Reference = cpb.create();
        }
        return props_Duration_Reference;
      case LanguageConceptSwitch.Duration_Type:
        if (props_Duration_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Duration_Type");
          props_Duration_Type = cpb.create();
        }
        return props_Duration_Type;
      case LanguageConceptSwitch.Elements:
        if (props_Elements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Elements = cpb.create();
        }
        return props_Elements;
      case LanguageConceptSwitch.EmptyContractContent:
        if (props_EmptyContractContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyContractContent");
          props_EmptyContractContent = cpb.create();
        }
        return props_EmptyContractContent;
      case LanguageConceptSwitch.IAction:
        if (props_IAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAction = cpb.create();
        }
        return props_IAction;
      case LanguageConceptSwitch.IClause:
        if (props_IClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IClause = cpb.create();
        }
        return props_IClause;
      case LanguageConceptSwitch.IContractContent:
        if (props_IContractContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContractContent = cpb.create();
        }
        return props_IContractContent;
      case LanguageConceptSwitch.IElements:
        if (props_IElements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IElements = cpb.create();
        }
        return props_IElements;
      case LanguageConceptSwitch.IParticipant:
        if (props_IParticipant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParticipant = cpb.create();
        }
        return props_IParticipant;
      case LanguageConceptSwitch.IVariables:
        if (props_IVariables == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariables = cpb.create();
        }
        return props_IVariables;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.Integer_Reference:
        if (props_Integer_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3c12506715400b6eL, 0x3c12506715400bcfL, "Integer", "", "");
          props_Integer_Reference = cpb.create();
        }
        return props_Integer_Reference;
      case LanguageConceptSwitch.Modality:
        if (props_Modality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Modality = cpb.create();
        }
        return props_Modality;
      case LanguageConceptSwitch.Participant:
        if (props_Participant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Participant = cpb.create();
        }
        return props_Participant;
      case LanguageConceptSwitch.ParticipantReference:
        if (props_ParticipantReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x2dbbedc3a2b95c56L, 0x2dbbedc3a2b95d18L, "participant", "", "");
          props_ParticipantReference = cpb.create();
        }
        return props_ParticipantReference;
      case LanguageConceptSwitch.Participant_Method_deposit:
        if (props_Participant_Method_deposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("participant deposits funds into contract");
          cpb.rawPresentation("deposit");
          props_Participant_Method_deposit = cpb.create();
        }
        return props_Participant_Method_deposit;
      case LanguageConceptSwitch.Participant_Type:
        if (props_Participant_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Participant_Type");
          props_Participant_Type = cpb.create();
        }
        return props_Participant_Type;
      case LanguageConceptSwitch.Require:
        if (props_Require == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("checks condition, if false print error message");
          cpb.rawPresentation("ensure");
          props_Require = cpb.create();
        }
        return props_Require;
      case LanguageConceptSwitch.TimeSpecification:
        if (props_TimeSpecification == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TimeSpecification = cpb.create();
        }
        return props_TimeSpecification;
      case LanguageConceptSwitch.TimeTriggerStatement:
        if (props_TimeTriggerStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TimeTriggerStatement = cpb.create();
        }
        return props_TimeTriggerStatement;
      case LanguageConceptSwitch.TimeTriggerStatement_duration:
        if (props_TimeTriggerStatement_duration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add Duration Trigger");
          props_TimeTriggerStatement_duration = cpb.create();
        }
        return props_TimeTriggerStatement_duration;
      case LanguageConceptSwitch.TimeTriggerStatement_time:
        if (props_TimeTriggerStatement_time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add Time Trigger");
          props_TimeTriggerStatement_time = cpb.create();
        }
        return props_TimeTriggerStatement_time;
      case LanguageConceptSwitch.TokenTransaction:
        if (props_TokenTransaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TokenTransaction = cpb.create();
        }
        return props_TokenTransaction;
      case LanguageConceptSwitch.TokenTransaction_Method_amount:
        if (props_TokenTransaction_Method_amount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("amount of the transaction");
          cpb.rawPresentation("amount");
          props_TokenTransaction_Method_amount = cpb.create();
        }
        return props_TokenTransaction_Method_amount;
      case LanguageConceptSwitch.TokenTransaction_Reference:
        if (props_TokenTransaction_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x49702a64e196179aL, 0x49702a64e19617fbL, "TokenTransaction", "", "");
          props_TokenTransaction_Reference = cpb.create();
        }
        return props_TokenTransaction_Reference;
      case LanguageConceptSwitch.TokenTransaction_Type:
        if (props_TokenTransaction_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TokenTransaction_Type");
          props_TokenTransaction_Type = cpb.create();
        }
        return props_TokenTransaction_Type;
      case LanguageConceptSwitch.Transfer:
        if (props_Transfer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("transfer funds from contract to participant");
          cpb.rawPresentation("transfer");
          props_Transfer = cpb.create();
        }
        return props_Transfer;
      case LanguageConceptSwitch.Trigger:
        if (props_Trigger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Trigger = cpb.create();
        }
        return props_Trigger;
      case LanguageConceptSwitch.TriggerStatement:
        if (props_TriggerStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TriggerStatement = cpb.create();
        }
        return props_TriggerStatement;
      case LanguageConceptSwitch.addDuration:
        if (props_addDuration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add a duration to a DateTime or Duration");
          cpb.rawPresentation("addDuration");
          props_addDuration = cpb.create();
        }
        return props_addDuration;
    }
    return null;
  }
}
