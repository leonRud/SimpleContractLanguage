package SimpleContractLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class check_Clause_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Clause_NonTypesystemRule() {
  }
  public void applyRule(final SNode clause, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getString(clause, PROPS.name$MnvL) != null && !(Character.isUpperCase(SPropertyOperations.getString(clause, PROPS.name$MnvL).charAt(0)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clause, "clause has to start with a capital letter", "r:48dfd78b-ed72-4539-9896-1fbd6e9212bf(SimpleContractLanguage.typesystem)", "4190375612442986507", null, errorTarget);
      }
    }
    SNode cov = SNodeOperations.cast(SNodeOperations.getParent(clause), CONCEPTS.Contract$IL);
    if (Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(cov, LINKS.clauses$zgA$), CONCEPTS.Clause$Sq)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), SPropertyOperations.getString(clause, PROPS.name$MnvL)) && !(Objects.equals(it, clause));
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clause, "duplicate clause name", "r:48dfd78b-ed72-4539-9896-1fbd6e9212bf(SimpleContractLanguage.typesystem)", "4190375612442730813", null, errorTarget);
      }
    }
    if ((SLinkOperations.getTarget(clause, LINKS.modality$cuza) != null) && SPropertyOperations.getString(SLinkOperations.getTarget(clause, LINKS.modality$cuza), PROPS.name$MnvL).equalsIgnoreCase("must") && (SLinkOperations.getTarget(clause, LINKS.triggerStatement$3Fig) == null)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clause, "Modality 'must' requires a TriggerStatment", "r:48dfd78b-ed72-4539-9896-1fbd6e9212bf(SimpleContractLanguage.typesystem)", "2655398726445970944", null, errorTarget);
      }
    }
    for (SNode actionReference : SLinkOperations.getChildren(clause, LINKS.actions$m9nt)) {
      for (SNode SNode : SLinkOperations.getChildren(clause, LINKS.actions$m9nt)) {
        if (Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(actionReference, LINKS.Action$aPpB), PROPS.name$MnvL), SPropertyOperations.getString(SLinkOperations.getTarget(SNode, LINKS.Action$aPpB), PROPS.name$MnvL)) && !(Objects.equals(actionReference, SNode))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(clause, "duplicate action", "r:48dfd78b-ed72-4539-9896-1fbd6e9212bf(SimpleContractLanguage.typesystem)", "4190375612445323101", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Clause$Sq;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Contract$IL = MetaAdapterFactory.getConcept(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad4f9743L, "SimpleContractLanguage.structure.Contract");
    /*package*/ static final SConcept Clause$Sq = MetaAdapterFactory.getConcept(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad503a77L, "SimpleContractLanguage.structure.Clause");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink clauses$zgA$ = MetaAdapterFactory.getContainmentLink(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad4f9743L, 0x4b6992bf6a89c529L, "clauses");
    /*package*/ static final SContainmentLink triggerStatement$3Fig = MetaAdapterFactory.getContainmentLink(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad503a77L, 0x2e4aefaabc0a0d4L, "triggerStatement");
    /*package*/ static final SReferenceLink modality$cuza = MetaAdapterFactory.getReferenceLink(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad503a77L, 0x2d7b9792287295dbL, "modality");
    /*package*/ static final SReferenceLink Action$aPpB = MetaAdapterFactory.getReferenceLink(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x3a27346aff20a726L, 0x3a27346aff20a727L, "Action");
    /*package*/ static final SContainmentLink actions$m9nt = MetaAdapterFactory.getContainmentLink(0x73e7dd6392b341e4L, 0xb2c2e5cfe1f50f1fL, 0x6e2c7874ad503a77L, 0x3a27346aff20a72bL, "actions");
  }
}
